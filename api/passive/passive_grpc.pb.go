// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: passive.proto

package passive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassiveServiceClient is the client API for PassiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassiveServiceClient interface {
	PassiveStream(ctx context.Context, opts ...grpc.CallOption) (PassiveService_PassiveStreamClient, error)
}

type passiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPassiveServiceClient(cc grpc.ClientConnInterface) PassiveServiceClient {
	return &passiveServiceClient{cc}
}

func (c *passiveServiceClient) PassiveStream(ctx context.Context, opts ...grpc.CallOption) (PassiveService_PassiveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PassiveService_ServiceDesc.Streams[0], "/passive.proto.PassiveService/PassiveStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &passiveServicePassiveStreamClient{stream}
	return x, nil
}

type PassiveService_PassiveStreamClient interface {
	Send(*UpMessage) error
	Recv() (*DownMessage, error)
	grpc.ClientStream
}

type passiveServicePassiveStreamClient struct {
	grpc.ClientStream
}

func (x *passiveServicePassiveStreamClient) Send(m *UpMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *passiveServicePassiveStreamClient) Recv() (*DownMessage, error) {
	m := new(DownMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PassiveServiceServer is the server API for PassiveService service.
// All implementations should embed UnimplementedPassiveServiceServer
// for forward compatibility
type PassiveServiceServer interface {
	PassiveStream(PassiveService_PassiveStreamServer) error
}

// UnimplementedPassiveServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPassiveServiceServer struct {
}

func (UnimplementedPassiveServiceServer) PassiveStream(PassiveService_PassiveStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PassiveStream not implemented")
}

// UnsafePassiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassiveServiceServer will
// result in compilation errors.
type UnsafePassiveServiceServer interface {
	mustEmbedUnimplementedPassiveServiceServer()
}

func RegisterPassiveServiceServer(s grpc.ServiceRegistrar, srv PassiveServiceServer) {
	s.RegisterService(&PassiveService_ServiceDesc, srv)
}

func _PassiveService_PassiveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PassiveServiceServer).PassiveStream(&passiveServicePassiveStreamServer{stream})
}

type PassiveService_PassiveStreamServer interface {
	Send(*DownMessage) error
	Recv() (*UpMessage, error)
	grpc.ServerStream
}

type passiveServicePassiveStreamServer struct {
	grpc.ServerStream
}

func (x *passiveServicePassiveStreamServer) Send(m *DownMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *passiveServicePassiveStreamServer) Recv() (*UpMessage, error) {
	m := new(UpMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PassiveService_ServiceDesc is the grpc.ServiceDesc for PassiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PassiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passive.proto.PassiveService",
	HandlerType: (*PassiveServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PassiveStream",
			Handler:       _PassiveService_PassiveStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "passive.proto",
}
